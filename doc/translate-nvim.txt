*translate-nvim.txt*			Use external translate command in nvim

==============================================================================
Contents						*translate-nvim-contents*

Introduction				|translate-nvim-introduction|
Command					|translate-nvim-command|
Setup					|translate-nvim-setup|
Option					|translate-nvim-option|
- defalut				|translate-nvim-option-default|
- command				|translate-nvim-option-command|
- parse_before				|translate-nvim-option-parse-before|
- parse_after				|translate-nvim-option-parse-after|
- output				|translate-nvim-option-output|
- preset				|translate-nvim-option-preset|
- silent				|translate-nvim-option-silent|
preset					|translate-nvim-preset|
- parse_before				|translate-nvim-preset-parse-before|
trim					|translate-nvim-preset-parse-before-trim|
concat					|translate-nvim-preset-parse-before-concat|
- command				|translate-nvim-preset-command|
  - translate_shell			|translate-nvim-preset-command-translate-shell|
  - deepl_free				|translate-nvim-preset-command-deepl-free|
  - deepl_pro				|translate-nvim-preset-command-deepl-pro|
- parse_after				|translate-nvim-preset-parse-after|
  - remove_newline			|translate-nvim-preset-parse-after-remove-newline|
  - oneline				|translate-nvim-preset-parse-after-oneline|
  - head				|translate-nvim-preset-parse-after-head|
  - rate				|translate-nvim-preset-parse-after-rate|
  - window				|translate-nvim-preset-parse-after-window|
  - deepl				|translate-nvim-preset-parse-after-deepl|
- output				|translate-nvim-preset-output|
  - floating				|translate-nvim-preset-output-floating|
  - split				|translate-nvim-preset-output-split|
  - insert				|translate-nvim-preset-output-insert|
  - replace				|translate-nvim-preset-output-replace|
  - register				|translate-nvim-preset-output-register|
Variables				|translate-nvim-variables|


==============================================================================
Introduction					*translate-nvim-introduction*

					*translate.nvim*	*translate-nvim*
translate.nvim ~

|translate.nvim| is a plugin for nvim that allows you to translate the
selection with any external command and handle the result as you like.

It provides |:Translate| for it.


Requirement:
  - neovim 0.5.0+


==============================================================================
Command							*translate-nvim-command*

								*:Translate*
:[range]Translate {target-lang} [{-options}...]

	{target-lang}: Required. The language into which the text should be
	translated. The format varies depending on the external command used.

	|:Translate| can take |:range|. |v|, |V| and |CTRL-V| are supported. If it was
	not given, |:Translate| treats current cursor line.

	available options:
		- '-source='
			The language of the text to be translated.
		- '-parse_before='
			The functions to format texts of selection. You can
			use a comma-separated string. If omitted,
			|translate-nvim-option-default-parse-before|.
		- '-command='
			The extermal command to use translation. If omitted,
			|translate-nvim-option-default-command| is used.
		- '-parse_after='
			The functions to format the result of extermal
			command. You can use a comma-separated string.
			If omitted, |translate-nvim-option-default-parse-after|.
		- '-output='
			The function to pass the translation result. If
			omitted, |translate-nvim-option-default-output|.
		- '-comment'
			Special option, used as a flag. If this flag is set
			and the cursor is over a comment, whole comment is
			treated as a selection.


	If mapping |:Translate|, Do NOT use |<Cmd>|. I use [range] to check
	whether this command is called from normal mode or visual mode. Please
	map them as follows.

>
	nnoremap mei :<C-u>Translate EN -parse_after=oneline -output=insert<CR>
	xnoremap mer :Translate EN -parse_after=head -output=replace<CR>
<


==============================================================================
Setup							*translate-nvim-setup*

The options are set through the setup function. See |translate-nvim-option| to
check available options.

>
	require("translate").setup({
		defalut = {
			command = "deepl_free",
			output = "floating",
		},
		preset = {
		output = {
		insert = {
			base = "top",
			off = -1,
		},
		},
		},
	})
<


==============================================================================
Option							*translate-nvim-option*

						*translate-nvim-option-default*
default ~

table

'parse_before', 'command', 'parse_after' and 'output' used by |:Translate|.
See |translate-nvim-preset|, to check the presets provided by |translate-nvim|.


				*translate-nvim-option-default-parse-before*
	parse_before ~

	string
	default: 'trim,concat'
	
	See |translate-nvim-preset-parse-before-trim| and
	|translate-nvim-preset-parse-before-concat|.


				*translate-nvim-option-default-command*
	command ~

	string
	default: 'translate_shell'

	See |translate-nvim-preset-command-translate-shell|.
	

				*translate-nvim-option-default-parse-after*
	parse_after ~

	string
	default: 'remove_newline,floating'
	
	See |translate-nvim-preset-parse-after-remove-newline| and
	|translate-nvim-preset-parse-after-floating|.


					*translate-nvim-option-default-output*
	output ~

	string
	default: 'floating'

	See |translate-nvim-preset-output-floating|.


					*translate-nvim-option-parse-before*
parse_before ~

table
defalut: {}

You can set any function you want to use for formatting selection.
Set tables with the value which has as 'cmd' key a function that returns
the command and arguments.
Check 'lua/translate/preset/parse_before' for details.


					*translate-nvim-option-command*
command ~

table
default: {}

You can set any external command you want to use for translation.
Set tables with the value which has as 'cmd' key a function that returns
the command and arguments.
Check 'lua/translate/preset/command' for details.


					*translate-nvim-option-parse-after*
parse_after ~

table
default: {}

You can set functions to format the result of the translation. Set tables with
the value which has as 'cmd' key a function. Check
'lua/translate/preset/parse_after' for details.


						*translate-nvim-option-output*
output ~

table
default: {}

You can set functions to be passed the result of the translation. Set tables
with the value which has as 'cmd' key a function. Check
'lua/translate/preset/output' for details.


						*translate-nvim-option-preset*
preset ~

Options passed to the presets.


				*translate-nvim-option-preset-parse-before*
	parse_before ~


				*translate-nvim-option-preset-parse-before-concat*
		concat ~

		table
		defalut: { sep = " " }

		Sets the delimiter used to join lines.


				*translate-nvim-option-preset-parse-before-trim*
		trim ~
		
		nil
		
		There are currently no options for 'trim'.


					*translate-nvim-option-preset-command*
	command ~


			*translate-nvim-option-preset-command-translate-shell*
		translate_shell ~

		table
		default: { args = { "-b", "-no-ansi" } }

		Set the arguments to be passed to the 'trans' command.


				*translate-nvim-option-preset-command-deepl-free*
		deepl_free ~

		table
		default: { args = {} }

		Set the arguments to be added to the 'curl' command.
		The defalut arguments of curl is
>
		{
			"-X",
			"POST",
			"-s",
			{url},
			"-d",
			"auth_key=" .. g:deepl_api_auth_key,
			"-d",
			"text=" .. {text},
			"-d",
			"target_lang=" .. {target-lang},
		}
<


				*translate-nvim-option-preset-command-deepl-pro*
		deepl_pro ~

		table
		default: { args = {} }

		Set the arguments to be added to the 'curl' command.


				*translate-nvim-option-preset-parse-after*
	parse_after ~


			*translate-nvim-option-preset-parse-after-remove-newline*
			*translate-nvim-option-preset-parse-after-oneline*
			*translate-nvim-option-preset-parse-after-head*
			*translate-nvim-option-preset-parse-after-rate*
			*translate-nvim-option-preset-parse-after-deepl*
		remove_newline, oneline, head, rate, deepl ~

		nil
		
		There are currently no options for these.


				*translate-nvim-option-preset-parse-after-window*
		window ~

		table:
		default: {
			width = 0.8
		}

		The 'width' is a percentage of the current window width.
		'parse_after/window' returns an array of text divided to fit
		within this width.



					*translate-nvim-option-preset-output*
	output ~


				*translate-nvim-option-preset-output-floating*
		floating ~
		
		table
		default: {
			relative = "cursor",
			style = "minimal",
			width = nil,
			height = nil,
			row = 1,
			col = 1,
			border = "single",
		}
		
		The option passed as the 3rd argument of |nvim_open_win()|.
		The 'width' and 'height' are automatically calculated from the
		received array.


				*translate-nvim-option-preset-output-split*
		split ~

		table
		default: {
			cmd = "topleft 5sp",
			name = "translate://output",
			filetype = "translate",
			append = false,
			mode = "oneline",
		}

		'cmd' is a command used to split current window in two. 'name'
		is the name of the split buffer, and 'filetype' is set to it.
		By default, it deletes the buffer contents each time. If
		'append' is true, the translation result will be added to the
		last line. 'mode' is used to break lines in the translation
		result, either on a single line if 'oneline', or similar to
		those of 'replace' if 'head' or 'rate'.

				*translate-nvim-option-preset-output-insert*
		insert ~
		
		table
		default: {
			base = 'bottom',
			off = 0,
		}
		
		Where to insert the translation result. If 'base' is 'top',
		the first line of the selection is used as the base, else if
		'bottom', the last of line the selection. Finally, add 'off'
		to the base. For example, with the default, it will be
		inserted just bellow the selection.
	
				*translate-nvim-option-preset-output-replace*
		replace ~
		

		You can choose the behavior of replace: 'head' respects the
		starting position and the original position; 'rate' calculates
		and distributes a percentage of the length of each original
		line.
		
	
				*translate-nvim-option-preset-output-register*
		register ~
		
		table
		default: {
			name = vim.v.register
		}
		
		Sets the translation result to the register specified by
		'name'. Users who set |clipboard| may want to check
		|register-variable| before changing this option.


						*translate-nvim-option-silent*
silent ~

boolean
default: false

If true, the 'Translate success/failed' messages will be disabled.


==============================================================================
Preset							*translate-nvim-preset*

The following is a list of commands, parsing functions, and output methods
provided by this plugin.


					*translate-nvim-preset-parse-before*
parse_before ~

A set of functions that take an array of lines of text from a selection and
process them into a string that is eventually passed to the translation
command. The second and subsequent functions receive the return value of the
previous function.


				*translate-nvim-preset-parse-before-trim*
	trim ~

	Execute |vim.trim()| on each line.


				*translate-nvim-preset-parse-before-concat*
	concat ~

	Takes an array of strings and concatenates them into a single string
	using a delimiter. The delimiter is <Space> by default. If you want to
	change it, use |translate-nvim-option-preset-parse-before-concat|.


						*translate-nvim-preset-command*
command ~

External commands used for translation.


				*translate-nvim-preset-command-translate-shell*
	translate_shell ~

	Use translate-shell.
	<https://github.com/soimort/translate-shell>


				*translate-nvim-preset-command-deepl-free*
	deepl_free ~

	Use DeepL API Free
	<https://www.deepl.com/en/docs-api/>

	Set your DeepL API authorization key to |g:deepl_api_auth_key|.

	'curl' command is required.
	<https://curl.se/>


				*translate-nvim-preset-command-deepl-pro*
	deepl_pro ~

	Use DeepL API Pro
	<https://www.deepl.com/en/docs-api/>

	What you need is the same as |translate-nvim-preset-command-deepl-free|.


					*translate-nvim-preset-parse-after*
parse_after ~

A set of functions that take a result of translation and process them into a
string that is eventually passed to the output. The second and subsequent
functions receive the return value of the previous function.


				*translate-nvim-preset-parse-after-remove-newline*
	remove_newline ~

	Remove \r and \n. The reason for using this is that the text to be
	inserted into the buffer is a line-by-line array, and an error will
	occur if each element of the array contains a newline character.


					*translate-nvim-preset-parse-after-oneline*
	oneline ~

	Returns an array whose only element is the received text as is.

	It is intended to be used with 'split', 'insert', and 'replace'. It is
	deprecated for use in 'floating' as it may not fit on the screen.


					*translate-nvim-preset-parse-after-head*
	head ~

	Returns an array of text divided to fit the display width of the
	original selection. The number of lines and the display width of the
	last line are not guaranteed because the number of characters changes
	before and after the translation.

	It is intended to be used with 'split', 'insert', 'replace', and
	'window'.


					*translate-nvim-preset-parse-after-rate*
	rate ~

	Returns an array of the received string divided by the ratio of the
	display width of each row of the original selection.

	It is intended to be used with 'split', 'insert', 'replace', and
	'window'.


					*translate-nvim-preset-parse-after-window*
	rate ~

	Returns an array of received strings divided by the percentage of the
	current window width. Default is 0.8. Use
	|translate-nvim-option-preset-parse-after-window| to change it.

	It is intended to be used with 'split', 'insert', 'replace', and
	'window'.


					*translate-nvim-preset-parse-after-deepl*
	deepl ~

	If 'command' is 'deepl_pro/free', this parser is added automatically.
	DeepL API returns the response in json format, which is parsed and the
	text of the translation result is taken. Use vim.json.decode (neovim
	0.6.0+) or |json_decode|


						*translate-nvim-preset-output*
output ~

Function passed the result of translation.


					*translate-nvim-preset-output-split*
	split ~

	Split the window and output the result to it. The name of the output
	buffer is 'translate://output' and the file type is 'translate'. See
	|translate-nvim-option-output-split|.


					*translate-nvim-preset-output-floating*
	floating ~

	Display the result in a floating window. See
	|translate-nvim-option-output-floating|.


					*translate-nvim-preset-output-insert*
	insert ~

	Insert the result into the current buffer. By default, it is inserted
	just below the selection. See |translate-nvim-option-output-insert|.


					*translate-nvim-preset-output-replace*
	replace ~

	Replace the original text with the result. See
	|translate-nvim-option-output-replace|.


					*translate-nvim-preset-output-register*
	register ~

	Set the result to the register. See
	|translate-nvim-option-output-register|.



==============================================================================
Variables					*translate-nvim-variables*

							*g:deepl_api_auth_key*
g:deepl_api_auth_key ~

Authentication key for DeepL API.



vim:tw=78:ts=8:noet:ft=help:norl:
